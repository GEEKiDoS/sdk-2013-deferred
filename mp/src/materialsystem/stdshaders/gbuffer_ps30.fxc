
// STATIC:		"ALPHATEST"			"0..1"
// STATIC:		"BUMPMAP"			"0..2"
// STATIC:		"NOCULL"			"0..1"
// STATIC:		"BUMPMAP2"			"0..1"
// STATIC:		"BLENDMODULATE"		"0..1"
// STATIC:		"SPECULAR"			"0..1"

// SKIP:		!$BUMPMAP2 && $BLENDMODULATE
// SKIP:		!$BUMPMAP && $BUMPMAP2
// SKIP:		$MODEL && $BUMPMAP2

#include "common_ps_fxc.h"
#include "common_deferred_fxc.h"

sampler sAlbedo							: register( s0 );

#if ALPHATEST
const float g_flAlphaRef				: register( c0 );
#endif

#if BUMPMAP
sampler sBumpmap						: register( s1 );
#endif

sampler sMraoMap						: register( s2 );

#if BUMPMAP2
sampler sBumpmap2							: register( s3 );
#endif

#if BLENDMODULATE
sampler sBlendmodulate						: register( s4 );
#endif

#if SPECULAR
sampler sSpecular							: register( s5 );
#endif

struct PS_INPUT
{
#if BLENDMODULATE
	float4 vTexCoord				: TEXCOORD0;
#else
	float2 vTexCoord : TEXCOORD0;
#endif
	float4 worldNormal_Depth : TEXCOORD1;

#if BUMPMAP
	float3 worldTangentS			: TEXCOORD2;
	float3 worldTangentT			: TEXCOORD3;
#endif

#if NOCULL
	float vDir						: VFACE;
#endif

#if BUMPMAP2
	float4 vColor_0					: COLOR0;
#endif
};


struct PS_OUTPUT
{
	float4 vColor_Normal : COLOR0;
	float4 vColor_Depth : COLOR1;
	float4 vColor_SpecRough : COLOR2;
	float4 vColor_LightCtrl : COLOR3;
};

PS_OUTPUT main(const PS_INPUT In)
{
	PS_OUTPUT Out;

	float4 flAlbedoSample = tex2D( sAlbedo, In.vTexCoord.xy );
#if ALPHATEST
	clip( flAlbedoSample.a - g_flAlphaRef );
#endif


#if BUMPMAP
	float3 bumpNormal = tex2D( sBumpmap, In.vTexCoord.xy ).rgb;

#if BUMPMAP2
	float3 bumpNormal2 = tex2D( sBumpmap2, In.vTexCoord.xy ).rgb;
	float flBlendfactor = In.vColor_0.w;
#if BLENDMODULATE
	flBlendfactor = GetModulatedBlend( flBlendfactor, tex2D( sBlendmodulate, In.vTexCoord.zw ).rg );
#endif
	bumpNormal = lerp( bumpNormal, bumpNormal2, flBlendfactor );
#endif

	float3 tangentNormal;
#if BUMPMAP == 1
	tangentNormal = bumpNormal * 2.0f - 1.0f;
#else
	tangentNormal = normalize( bumpBasis[0]*bumpNormal.x + bumpBasis[1]*bumpNormal.y + bumpBasis[2]*bumpNormal.z);
#endif
	float3 worldNormal = Vec3TangentToWorld( tangentNormal, In.worldNormal_Depth.xyz, In.worldTangentS, In.worldTangentT );
#else
	float3 worldNormal = In.worldNormal_Depth.xyz;
#endif

#if NOCULL
	worldNormal *= In.vDir;
#endif

	worldNormal = worldNormal * 0.5 + 0.5;
	
	float3 mrao = tex2D(sMraoMap, In.vTexCoord.xy);
#if SPECULAR
	float3 specular = tex2D(sSpecular, In.vTexCoord.xy).rgb;
#else
	float3 specular = lerp(0.0, flAlbedoSample.rgb, mrao.x);
#endif
	
	Out.vColor_Normal = float4(worldNormal, 1);
	Out.vColor_Depth = float4(In.worldNormal_Depth.w, 0, 0, 1);
	Out.vColor_SpecRough = float4(specular, mrao.y);
	Out.vColor_LightCtrl = float4(0, 0, 0, 1);
	
	return Out;
}
